;; -*- mode: emacs-lisp; coding: utf-8-unix -*-
;; Minibuffer history file, automatically generated by ‘savehist’.

(setq savehist-minibuffer-history-variables '(org-tags-history org-refile-history magit-revision-history coding-system-history ido-file-history shell-command-history swiper-history counsel-git-grep-history minibuffer-history ido-buffer-history file-name-history ivy-history extended-command-history))
(setq org-tags-history '(#("dank" 0 4 (ivy-index 0))))
(setq org-refile-history '(#("Ideas" 0 1 (org-category "clustard" face org-level-1 font-lock-fontified t fontified t idx 0) 1 5 (org-category "clustard" face org-level-1 font-lock-fontified t fontified t)) #("Clustard Options" 0 1 (face org-level-1 org-category "clustard" font-lock-fontified t fontified t idx 1) 1 16 (face org-level-1 org-category "clustard" font-lock-fontified t fontified t)) #("Ideas" 0 1 (org-category "clustard" face org-level-1 font-lock-fontified t fontified t idx 0) 1 5 (org-category "clustard" face org-level-1 font-lock-fontified t fontified t))))
(setq ido-file-history '("." "internal" nil "utils-repos" "." "js-test-default" "js-block-header" "." "js-block-header" "."))
(setq shell-command-history '("ssh-add ~/.ssh/nu-enum" "ssh-add ~/.ssh/emacs.d" "ssh-add" "ssh-add ~/.ssh/emacs.d" "eval $(ssh-agent -s)" "ssh-add ~/.ssh/emacs.d" "eval \"$(ssh-agent -s)\"" "ssh-add" "eval \"$(ssh-agent -s)\"" "ssh-add" "ssh-add ~/.ssh/emacs.d" "eval \"$(ssh-agent -s)\"" "ssh-add ~/.ssh/emacs.d"))
(setq swiper-history '(#("/package" 0 8 (ivy-index 2)) #("Your vers" 0 9 (ivy-index 0)) #("yas-expand-snippet" 0 18 (ivy-index 6)) #("dired-omit-files" 0 16 (ivy-index 2)) #("\\.last" 0 6 (ivy-index 0))))
(setq counsel-git-grep-history '(#("delete-this" 0 11 (ivy-index 0)) #("cmd" 0 3 (ivy-index 0)) #("DOTFILES_LOG" 0 12 (ivy-index 3)) #("desktop" 0 7 (ivy-index 0)) #("stripe" 0 6 (ivy-index 1))))
(setq minibuffer-history '("utils-build" "sync" "sync.sh" "bash_functions" "bash_exports" "bash_aliases" "aliases" ".aliases" "/bin/bash" "backup-hourly.sh" "50" "0" "50" "desktop" "105" "0" "100" "105" "110" "100" "50" "worker-list.js" "50" "master-setup.js" "worker-setup.js" "50" "js2-mode" "50" "/bin/bash" "20" "50" "/bin/bash" "50" "/bin/bash" "50" "/bin/bash" "10" "20" "50" "convert.sh" "50" "worker.spec.js" "worker.js" "50" "65" "70" "50" "80" "100" "js2-mode" "/bin/bash" "20" "10" "50" "80" "50"))
(setq ido-buffer-history '("*Backtrace*" "*Completions*" "TODO.org" "*Help*" "*Completions*" ".bash_profile" "*Ibuffer*" "*Buffer List*" "chrome" "emacs" "mode-bash.el" ".#mode-bash.el" "*Completions*" "*Buffer List*" "*Completions*" "sync" "packages" "chrome" "*Completions*" "bashrc" "aliases" "*Completions*" ".bash_profile" "*Buffer List*" "*ansi-term*" "*Completions*" "*Buffer List*" "*Completions*" "*Buffer List*" "*Completions*" "load-balancer.js • src" "*Completions*" "worker.js • src" "*Completions*" "plugins.spec.js" "plugins.js" "projectile.el" "core-projectile.el" "yasnippet.el" "*Buffer List*" "midnight.el.gz" "*Messages*" "core-yasnippet.el" "*magit-diff: .emacs.d" "*magit: .emacs.d" "options.spec.js" "*Backtrace*" "*magit: clustard" "components • src" "sribich" "clustard" "*magit: clustard" "*Help*" "plugin.js" "module.js" "*Buffer List*" "cluster-server.js" "*Help*" "*Completions*" "*magit-diff: .emacs.d" "*magit: .emacs.d" "*Help*" "js-block-header" "*Completions*" "save20290-akumaki~" "*Backtrace*" "*Flycheck errors*" "*magit-diff: .emacs.d" "*magit: .emacs.d" "*magit-diff: .emacs.d" "*magit: .emacs.d" "/" "*Help*" "lisp" ".emacs.d" "*Help*" "core-dired.el" ".emacs.d" "lisp" "/" "core-ui.el" "dired-rainbow.el" "*Help*" "*Warnings*" "*Help*" "counsel.el" "*Backtrace*" "/" ".emacs.d" "/" "src" "lisp" "/" "src" "/" "*Help*" "/" "lisp" "/" "*Help*"))
(setq file-name-history '(#("/home/sribich/.dotfiles/lib/internal" 0 36 (ivy-index 0)) "/home/sribich/.dotfiles/bin/_dotfiles" "/home/sribich/.dotfiles/lib/repositories" "/home/sribich/.dotfiles/packages/wget" "/home/sribich/.dotfiles/lib/utils-rpm" "/home/sribich/.dotfiles/lib/utils-interactive" "/home/sribich/.dotfiles/lib/utils-package" "/home/sribich/.dotfiles/lib/utils-screen" "/home/sribich/.dotfiles/lib/build" "/home/sribich/.dotfiles/.git/COMMIT_EDITMSG" "/home/sribich/.nvm/nvm.sh" "/home/sribich/.dotfiles/packages/nvm" "/home/sribich/.dotfiles/packages/mpv" "/home/sribich/.dotfiles/TODO.org" "/home/sribich/.dotfiles/packages/emacs" "/home/sribich/.dotfiles/lib/links" "/home/sribich/.dotfiles/.git/COMMIT_EDITMSG" "/home/sribich/.dotfiles/emacs.d/mode/mode-bash.el" "/home/sribich/.dotfiles/emacs.d/mode/.#mode-bash.el" "/home/sribich/.dotfiles/package/git" "/tmp/emacs-emacs-25.1/configure" "/home/sribich/.dotfiles/package/slack" "/home/sribich/.dotfiles/package/skype" "/home/sribich/.dotfiles/package/emacs" "/home/sribich/.dotfiles/package/deadbeef" "/home/sribich/.dotfiles/package/qbittorrent" "/home/sribich/.dotfiles/bin/packages" "/home/sribich/.dotfiles/bin/sync" "/home/sribich/.dotfiles/lib/chrome" "/home/sribich/testTime.sh" "/home/sribich/.bash_profile" "/home/sribich/Projects/object-no-prototype/" "/home/sribich/Projects/nu-enum/.git/COMMIT_EDITMSG" "/home/sribich/Projects/clustard/src/components/worker/state.js" "/home/sribich/Projects/clustard/src/components/worker/flag.js" "/home/sribich/Projects/clustard/src/components/worker/process.js" "/home/sribich/Projects/clustard/src/components/worker-pool.js" "/home/sribich/Projects/clustard/src/components/worker.js" "/home/sribich/Projects/clustard/test/components/shutdown.spec.js" "/home/sribich/Projects/clustard/src/master-setup.js" "/home/sribich/Projects/clustard/src/clustard.js" "/home/sribich/Projects/clustard/src/master.js" "/home/sribich/Projects/clustard/src/worker.js" "/home/sribich/Projects/clustard/test/components/plugin.file.js" "/home/sribich/.emacs.d/.git/COMMIT_EDITMSG" "/home/sribich/Projects/clustard/test/options.spec.js" "/home/sribich/Projects/clustard/src/options.js" "/home/sribich/Projects/clustard/src/plugins/strategies.js" "/home/sribich/.emacs.d/.git/COMMIT_EDITMSG" "/home/sribich/Projects/clustard/src/components/shutdown.js" "/home/sribich/Projects/clustard/src/components/load-balancer.js" "/home/sribich/Projects/clustard/.git/COMMIT_EDITMSG" "/home/sribich/Projects/clustard/test/components/plugin.spec.js" "/home/sribich/Projects/clustard/src/components/plugin.js" "/home/sribich/Projects/clustard/.git/COMMIT_EDITMSG" "/home/sribich/Projects/clustard/src/components/strategy.js" "/home/sribich/Projects/clustard/test/components/api.spec.js" "/home/sribich/Projects/clustard/src/components/api.js" "/home/sribich/Projects/clustard/src/components/module.js" "/home/sribich/Projects/clustard/test/components/http.spec.js" "/home/sribich/Projects/clustard/src/components/http.js" "/home/sribich/Projects/clustard/test/cluster-server.spec.js" "/home/sribich/Projects/clustard/test/components/runflag.spec.js" "/home/sribich/.emacs.d/lisp/core-save.el" "/tmp/test.js" "/home/sribich/Downloads/test.sh" "/home/sribich/Downloads/TEST/test.sh" "/home/sribich/.emacs.d/.git/COMMIT_EDITMSG" "/home/sribich/.emacs.d/lisp/core-writing.el" "/home/sribich/.emacs.d/lisp/core-defuns.el" "/home/sribich/.emacs.d/lisp/core-company.el" "/home/sribich/.emacs.d/lisp/core-editor.el" "/home/sribich/.emacs.d/lisp/core-modeline.el" "/home/sribich/.emacs.d/lisp/core-ido.el" "/home/sribich/.emacs.d/lisp/core-ivy.el" "/home/sribich/.emacs.d/lisp/core-automodes.el" "/home/sribich/.emacs.d/INSTALL.md" "/home/sribich/.emacs.d/lisp/core-ui.el" "/home/sribich/.emacs.d/lisp/core-binds.el" "/home/sribich/.emacs.d/.git/COMMIT_EDITMSG" "/home/sribich/.emacs.d/init.el" "/home/sribich/.emacs.d/LICENSE" "/home/sribich/.emacs.d/emacs.org" "/home/sribich/.emacs.d/lisp/core-yasnippet.el" "/home/sribich/.emacs.d/" "~/.emacs.d/lisp/core-ivy.el" "~/.emacs.d/lisp/core.el" "~/.emacs.d/lisp/core-editor.el" "~/.emacs.d/lisp/core-windows.el" "~/.emacs.d/emacs.org" "~/.emacs.d/init.el" "/home/sribich/.emacs.d/.git/COMMIT_EDITMSG" "/etc/ssh/sshd_config" "~/.emacs.d/site/emacs-doom-theme/doom-dark-theme.el" "~/.emacs.d/site/emacs-doom-theme/doom-one-theme.el" "/home/sribich/Projects/clustard/.git/COMMIT_EDITMSG" "/home/sribich/Projects/nu-enum/.git/COMMIT_EDITMSG" "/home/sribich/Projects/clustard/.git/COMMIT_EDITMSG" "~/Projects/battlenull/battlenull.org" "~/Projects/nu-interfaces/src/signature.js"))
(setq ivy-history '(#("_dot" 0 4 (ivy-index 0)) #("link" 0 4 (ivy-index 0)) #("utils-rpm" 0 9 (ivy-index 0)) #("build" 0 5 (ivy-index 0)) #("repos" 0 5 (ivy-index 1)) #("inter" 0 5 (ivy-index 0)) #("pack" 0 4 (ivy-index 1)) #("util" 0 4 (ivy-index 1)) #("_do" 0 3 (ivy-index 0)) "core-defuns.el" #("core-de" 0 7 (ivy-index 0)) #("em" 0 2 (ivy-index 6)) #("dot" 0 3 (ivy-index 0)) #("scree" 0 5 (ivy-index 0)) #("gitc" 0 4 (ivy-index 0)) #(".gitig" 0 6 (ivy-index 0)) #("dead" 0 4 (ivy-index 0)) #("todo" 0 4 (ivy-index 0)) #("dotf" 0 4 (ivy-index 0)) "~/Projects/clustard/" #("nvm" 0 3 (ivy-index 0)) #("repo" 0 4 (ivy-index 1)) #("screen" 0 6 (ivy-index 0)) #("utils" 0 5 (ivy-index 0)) #("wget" 0 4 (ivy-index 0)) "bash_profile" #("pro" 0 3 (ivy-index 1)) #("paths" 0 5 (ivy-index 0)) #("bash_p" 0 6 (ivy-index 1)) #("bashr" 0 5 (ivy-index 0)) "utils-screen" "TODO.org" "utils-screen" #("slac" 0 4 (ivy-index 0)) #("package" 0 7 (ivy-index 0)) #("dotfi" 0 5 (ivy-index 0)) #("install" 0 7 (ivy-index 0)) #("mp" 0 2 (ivy-index 0)) #("links" 0 5 (ivy-index 0)) "_dotfiles" #("mpv" 0 3 (ivy-index 0)) #("sync" 0 4 (ivy-index 0)) "dotfiles" "utils-package" #("git" 0 3 (ivy-index 0)) "_dotfiles" "emacs" #("emacs" 0 5 (ivy-index 0)) "deadbeef" #("buil" 0 4 (ivy-index 0)) #("file" 0 4 (ivy-index 0)) #("TODO" 0 4 (ivy-index 0)) #("deadb" 0 5 (ivy-index 0)) #("dotfil" 0 6 (ivy-index 0)) "packages" #("utils-repos" 0 11 (ivy-index 0)) #("emac" 0 4 (ivy-index 0)) #("scre" 0 4 (ivy-index 0)) #("scr" 0 3 (ivy-index 1)) #("chr" 0 3 (ivy-index 0)) #("chrom" 0 5 (ivy-index 0)) #("syn" 0 3 (ivy-index 0)) #("qbit" 0 4 (ivy-index 0)) #("rpm" 0 3 (ivy-index 0)) "slack" "skype" "skype" #("sky" 0 3 (ivy-index 0)) #("slack" 0 5 (ivy-index 0)) "skype" #("skype" 0 5 (ivy-index 0)) #("chrome" 0 6 (ivy-index 0)) #("packa" 0 5 (ivy-index 0)) "TODO.org" #("gitig" 0 5 (ivy-index 0)) "dotfiles" "dotfiles" "dotfiles" #("uti" 0 3 (ivy-index 0)) "TODO.org" #("utils-" 0 6 (ivy-index 2)) "TODO.org" "utils-package" "utils-screen" "dotfiles" "dotfiles" "dotfiles" "utils-screen" "utils-screen" "dotfiles" "dotfiles" "dotfiles" "dotfiles" "dotfiles" "dotfiles" "dotfiles" "dotfiles" "dotfiles" "dotfiles"))
(setq extended-command-history '(#("^move" 0 5 (ivy-index 0)) #("^move-this-file" 0 15 (ivy-index 0)) #("^" 0 1 (ivy-index 0)) #("^move-this" 0 10 (ivy-index 0)) #("^make-directory" 0 15 (ivy-index 0)) #("^ren" 0 4 (ivy-index 0)) #("^delete-this-file" 0 17 (ivy-index 0)) #("^shell" 0 6 (ivy-index 0)) #("^shell-script-mode" 0 18 (ivy-index 0)) #("^coun" 0 5 (ivy-index 0)) #("^rename" 0 7 (ivy-index 0)) #("^hs-h" 0 5 (ivy-index 0)) #("^hs-show-all" 0 12 (ivy-index 0)) #("^s" 0 2 (ivy-index 0)) #("^she" 0 4 (ivy-index 0)) #("^hs-" 0 4 (ivy-index 0)) #("^hs-hide-all" 0 12 (ivy-index 0)) #("^hs-hide" 0 8 (ivy-index 0)) #("^whitespace-cl" 0 14 (ivy-index 1)) #("^ibuf" 0 5 (ivy-index 0)) #("ag" 0 2 (ivy-index 0)) #("desktop" 0 7 (ivy-index 1)) #("^delete" 0 7 (ivy-index 0)) #("^setup-sh-mode" 0 14 (ivy-index 0)) #("^delete-this" 0 12 (ivy-index 0)) #("^shell-" 0 7 (ivy-index 0)) #("^flyspell-pr" 0 12 (ivy-index 0)) #("^ispell-" 0 8 (ivy-index 0)) #("^ispell-region" 0 14 (ivy-index 0)) #("^shel" 0 5 (ivy-index 0)) #("^rename-" 0 8 (ivy-index 0)) #("^renam" 0 6 (ivy-index 0)) #("^shell-sc" 0 9 (ivy-index 0)) #("^kill-emacs" 0 11 (ivy-index 0)) #("^shell-script" 0 13 (ivy-index 0)) #("^rename-this-file" 0 17 (ivy-index 0)) #("^ansi-term" 0 10 (ivy-index 0)) #("^set-window" 0 11 (ivy-index 0)) #("relo" 0 4 (ivy-index 1)) #("^set" 0 4 (ivy-index 0)) #("^desktop-change-dir" 0 19 (ivy-index 0)) #("^desktop-read" 0 13 (ivy-index 0)) #("^desktop-save" 0 13 (ivy-index 0)) #("^couns" 0 6 (ivy-index 0)) #("-ag" 0 3 (ivy-index 3)) #("^set-win" 0 8 (ivy-index 0)) #("^delete-" 0 8 (ivy-index 0)) #("^rename-this" 0 12 (ivy-index 0)) #("^set-wi" 0 7 (ivy-index 0)) #("^winn" 0 5 (ivy-index 0)) #("^find" 0 5 (ivy-index 0)) #("^load-" 0 6 (ivy-index 0)) #("^yas-rel" 0 8 (ivy-index 0)) #("^find-" 0 6 (ivy-index 0)) #("^yas/expand" 0 11 (ivy-index 0)) #("yas-i" 0 5 (ivy-index 0)) #("^find-l" 0 7 (ivy-index 0)) #("^dired-omit" 0 11 (ivy-index 0)) #("^load-lib" 0 9 (ivy-index 0)) #("^ansi" 0 5 (ivy-index 0)) #("^set-window-he" 0 14 (ivy-index 0)) #("^set-w" 0 6 (ivy-index 0)) #("^set-windo" 0 10 (ivy-index 0)) #("^toggle-dired-win" 0 17 (ivy-index 0)) #("^set-window-width" 0 17 (ivy-index 0)) #("^toggle-dired" 0 13 (ivy-index 0)) #("^set-window-" 0 12 (ivy-index 0)) #("set-window-" 0 11 (ivy-index 1)) #("dired-window" 0 12 (ivy-index 2)) #("^set-" 0 5 (ivy-index 0)) #("^kill-" 0 6 (ivy-index 0)) #("^dired" 0 6 (ivy-index 1)) #("^revert-buffer" 0 14 (ivy-index 0)) #("^revert-bu" 0 10 (ivy-index 1)) #("^dired-k" 0 8 (ivy-index 0)) #("^package-in" 0 11 (ivy-index 0)) #("^package-refre" 0 14 (ivy-index 0)) #("^find-file-other-window" 0 23 (ivy-index 0)) #("load-the" 0 8 (ivy-index 0)) #("^hs-min" 0 7 (ivy-index 0)) #("^yas-global-mode" 0 16 (ivy-index 0)) #("^yas-vis" 0 8 (ivy-index 0)) #("^yas-reload-all" 0 15 (ivy-index 0)) #("^yas/re" 0 7 (ivy-index 0)) #("^yas-vi" 0 7 (ivy-index 0)) #("^set-window-height" 0 18 (ivy-index 0)) #("^yas-in" 0 7 (ivy-index 0)) #("^yas/new" 0 8 (ivy-index 0)) #("^js2-mode" 0 9 (ivy-index 0)) #("term" 0 4 (ivy-index 1)) #("^load-theme" 0 11 (ivy-index 0)) #("^revert" 0 7 (ivy-index 0)) #("^set-wind" 0 9 (ivy-index 0)) #("fill-column" 0 11 (ivy-index 1)) #("^hl-l" 0 5 (ivy-index 0)) #("^visual" 0 7 (ivy-index 1)) #("^visual-" 0 8 (ivy-index 0)) #("^dired-jump" 0 11 (ivy-index 0)) #("^rev" 0 4 (ivy-index 0))))
(setq kill-ring '(#("|| ! -f \"$link_path\"" 0 3 (fontified t) 3 4 (fontified t face font-lock-negation-char-face) 4 8 (fontified t) 8 20 (fontified t face font-lock-string-face)) #("
" 0 1 (fontified t)) #("    local link_path=\"$(readlink -f $link_to)\"
" 0 1 (face highlight-indent-guides-character-face display "│" fontified t highlight-indent-guides-prop even) 1 2 (fontified t highlight-indent-guides-prop even) 2 3 (face highlight-indent-guides-character-face display "│" fontified t highlight-indent-guides-prop odd) 3 4 (fontified t highlight-indent-guides-prop odd) 4 5 (face font-lock-builtin-face fontified t) 5 9 (face font-lock-builtin-face fontified t) 9 10 (fontified t) 10 19 (face font-lock-variable-name-face fontified t) 19 20 (fontified t) 20 22 (face font-lock-string-face fontified t) 22 23 (face font-lock-string-face fontified t) 23 31 (face sh-quoted-exec fontified t) 31 43 (face font-lock-string-face fontified t) 43 44 (face font-lock-string-face fontified t) 44 45 (face font-lock-string-face fontified t) 45 46 (fontified t)) #("  " 0 1 (fontified t face whitespace-trailing) 1 2 (fontified t face whitespace-trailing)) #("  " 0 2 (fontified t face whitespace-trailing)) #("local link_path=\"$(readlink -f $link_to)\"" 0 1 (fontified t face font-lock-builtin-face) 1 5 (fontified t face font-lock-builtin-face) 5 6 (fontified t) 6 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t) 16 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 27 (fontified t face sh-quoted-exec) 27 39 (fontified t face font-lock-string-face) 39 40 (fontified t face font-lock-string-face) 40 41 (rear-nonsticky t fontified t face font-lock-string-face)) #("    fi
" 0 1 (face highlight-indent-guides-character-face display "│" fontified t highlight-indent-guides-prop even) 1 2 (fontified t highlight-indent-guides-prop even) 2 3 (face highlight-indent-guides-character-face display "│" fontified t highlight-indent-guides-prop odd) 3 4 (fontified t highlight-indent-guides-prop odd) 4 5 (face font-lock-keyword-face fontified t) 5 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) #("
    else" 0 1 (fontified t) 1 2 (face highlight-indent-guides-character-face display "│" fontified t highlight-indent-guides-prop even) 2 3 (fontified t highlight-indent-guides-prop even) 3 4 (face highlight-indent-guides-character-face display "│" fontified t highlight-indent-guides-prop odd) 4 5 (fontified t highlight-indent-guides-prop odd) 5 6 (face font-lock-keyword-face fontified t) 6 9 (face font-lock-keyword-face fontified t)) #("    echo \"$link_path\" 1>&3

" 0 1 (highlight-indent-guides-prop even fontified t display "│" face highlight-indent-guides-character-face) 1 2 (highlight-indent-guides-prop even fontified t) 2 3 (highlight-indent-guides-prop odd fontified t display "│" face highlight-indent-guides-character-face) 3 4 (highlight-indent-guides-prop odd fontified t) 4 5 (fontified t face font-lock-builtin-face) 5 8 (fontified t face font-lock-builtin-face) 8 9 (fontified t) 9 21 (fontified t face font-lock-string-face) 21 22 (fontified t) 22 23 (fontified t) 23 25 (fontified t) 25 26 (fontified t) 26 27 (fontified t) 27 28 (fontified t)) #("local link_path=\"$(readlink -f $link_to)\"" 0 1 (fontified t face (highlight-symbol-face font-lock-builtin-face)) 1 5 (fontified t face (highlight-symbol-face font-lock-builtin-face)) 5 6 (fontified t) 6 15 (fontified t face font-lock-variable-name-face) 15 16 (fontified t) 16 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face) 19 27 (fontified t face sh-quoted-exec) 27 39 (fontified t face font-lock-string-face) 39 40 (fontified t face font-lock-string-face) 40 41 (fontified t face font-lock-string-face)) #("
" 0 1 (fontified t)) #("    exit" 0 1 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 1 2 (fontified t highlight-indent-guides-prop even) 2 3 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 3 4 (fontified t highlight-indent-guides-prop odd) 4 5 (fontified t face font-lock-keyword-face) 5 8 (fontified t face font-lock-keyword-face)) #("  echo \"$link_to\" 1>&3" 0 1 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 1 2 (fontified t highlight-indent-guides-prop even) 2 3 (fontified t face font-lock-builtin-face) 3 6 (fontified t face font-lock-builtin-face) 6 7 (fontified t) 7 17 (fontified t face font-lock-string-face) 17 21 (fontified t) 21 22 (fontified t)) #("    exit
" 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop even fontified t) 1 2 (highlight-indent-guides-prop even fontified t) 2 3 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop odd fontified t) 3 4 (highlight-indent-guides-prop odd fontified t) 4 5 (face font-lock-keyword-face fontified t) 5 8 (face font-lock-keyword-face fontified t) 8 9 (fontified t)) #("  
" 0 2 (face whitespace-trailing fontified t) 2 3 (fontified t)) #("  echo 
" 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop even fontified t) 1 2 (highlight-indent-guides-prop even fontified t) 2 3 (face font-lock-builtin-face fontified t) 3 6 (face font-lock-builtin-face fontified t) 6 7 (face whitespace-trailing fontified t) 7 8 (fontified t)) #("
    
" 0 1 (fontified t) 1 2 (fontified t face whitespace-trailing) 2 3 (fontified t face whitespace-trailing) 3 4 (fontified t face whitespace-trailing) 4 5 (fontified t face whitespace-trailing) 5 6 (fontified t)) #("fail
    die \"File $link_to already exists and is not linked.\" 71" 0 1 (fontified t) 1 5 (fontified t) 5 6 (highlight-indent-guides-prop even fontified t display "│" face highlight-indent-guides-character-face) 6 7 (highlight-indent-guides-prop even fontified t) 7 8 (highlight-indent-guides-prop odd fontified t display "│" face highlight-indent-guides-character-face) 8 9 (highlight-indent-guides-prop odd fontified t) 9 10 (fontified t) 10 13 (fontified t) 13 14 (fontified t face font-lock-string-face) 14 61 (fontified t face font-lock-string-face) 61 62 (fontified t face font-lock-string-face) 62 65 (fontified t)) #("to" 0 2 (fontified t face font-lock-string-face)) #("
" 0 1 (fontified t)) #("    if [[ \"\" ]]
    " 0 1 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 1 2 (fontified t highlight-indent-guides-prop even) 2 3 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 3 4 (fontified t highlight-indent-guides-prop odd) 4 5 (fontified t face font-lock-keyword-face) 5 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t face (rainbow-delimiters-depth-2-face)) 8 9 (fontified t face (rainbow-delimiters-depth-3-face)) 9 10 (fontified t) 10 12 (fontified t face font-lock-string-face) 12 13 (fontified t) 13 14 (fontified t face (rainbow-delimiters-depth-3-face)) 14 15 (fontified t face (rainbow-delimiters-depth-2-face)) 15 16 (fontified t) 16 20 (face whitespace-trailing fontified t)) #("
" 0 1 (fontified t)) #("    
    " 0 4 (fontified t face whitespace-trailing) 4 5 (fontified t) 5 9 (face whitespace-trailing fontified t)) #("    (if (not filename)
        (message \"Buffer '%s' is not visiting a file!\" name)
      (progn (copy-file filename newname 1)
             (delete-file filename)
             (set-visited-file-name newname)
             (set-buffer-modified-p nil)
             t))))" 0 1 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 1 2 (fontified t highlight-indent-guides-prop even) 2 3 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 3 4 (fontified t highlight-indent-guides-prop odd) 4 5 (fontified t face (rainbow-delimiters-depth-3-face)) 5 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t) 8 9 (fontified t face (rainbow-delimiters-depth-1-face)) 9 13 (fontified t) 13 21 (fontified t) 21 22 (fontified t face (rainbow-delimiters-depth-1-face)) 22 23 (fontified t) 23 24 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 24 25 (fontified t highlight-indent-guides-prop even) 25 26 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 26 27 (fontified t highlight-indent-guides-prop odd) 27 28 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 28 29 (fontified t highlight-indent-guides-prop even) 29 30 (fontified t highlight-indent-guides-prop even) 30 31 (fontified t highlight-indent-guides-prop even) 31 32 (fontified t face (rainbow-delimiters-depth-1-face)) 32 40 (fontified t) 40 41 (fontified t face font-lock-string-face) 41 47 (fontified t face font-lock-string-face) 47 77 (fontified t face font-lock-string-face) 77 82 (fontified t) 82 83 (fontified t face (rainbow-delimiters-depth-1-face)) 83 84 (fontified t) 84 85 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 85 86 (fontified t highlight-indent-guides-prop even) 86 87 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 87 88 (fontified t highlight-indent-guides-prop odd) 88 89 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 89 90 (fontified t highlight-indent-guides-prop even) 90 91 (fontified t face (rainbow-delimiters-depth-1-face)) 91 96 (fontified t face font-lock-keyword-face) 96 97 (fontified t) 97 98 (fontified t face (rainbow-delimiters-depth-2-face)) 98 108 (fontified t) 108 116 (fontified t) 116 117 (fontified t) 117 124 (fontified t) 124 126 (fontified t) 126 127 (fontified t face (rainbow-delimiters-depth-2-face)) 127 128 (fontified t) 128 129 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 129 130 (fontified t highlight-indent-guides-prop even) 130 131 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 131 132 (fontified t highlight-indent-guides-prop odd) 132 133 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 133 134 (fontified t highlight-indent-guides-prop even) 134 135 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 135 136 (fontified t highlight-indent-guides-prop odd) 136 137 (fontified t highlight-indent-guides-prop odd) 137 138 (fontified t highlight-indent-guides-prop odd) 138 139 (fontified t highlight-indent-guides-prop odd) 139 140 (fontified t highlight-indent-guides-prop odd) 140 141 (fontified t highlight-indent-guides-prop odd) 141 142 (fontified t face (rainbow-delimiters-depth-2-face)) 142 154 (fontified t) 154 162 (fontified t) 162 163 (fontified t face (rainbow-delimiters-depth-2-face)) 163 164 (fontified t) 164 165 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 165 166 (fontified t highlight-indent-guides-prop even) 166 167 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 167 168 (fontified t highlight-indent-guides-prop odd) 168 169 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 169 170 (fontified t highlight-indent-guides-prop even) 170 171 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 171 172 (fontified t highlight-indent-guides-prop odd) 172 173 (fontified t highlight-indent-guides-prop odd) 173 174 (fontified t highlight-indent-guides-prop odd) 174 175 (fontified t highlight-indent-guides-prop odd) 175 176 (fontified t highlight-indent-guides-prop odd) 176 177 (fontified t highlight-indent-guides-prop odd) 177 178 (fontified t face (rainbow-delimiters-depth-2-face)) 178 200 (fontified t) 200 207 (fontified t) 207 208 (fontified t face (rainbow-delimiters-depth-2-face)) 208 209 (fontified t) 209 210 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 210 211 (fontified t highlight-indent-guides-prop even) 211 212 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 212 213 (fontified t highlight-indent-guides-prop odd) 213 214 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 214 215 (fontified t highlight-indent-guides-prop even) 215 216 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 216 217 (fontified t highlight-indent-guides-prop odd) 217 218 (fontified t highlight-indent-guides-prop odd) 218 219 (fontified t highlight-indent-guides-prop odd) 219 220 (fontified t highlight-indent-guides-prop odd) 220 221 (fontified t highlight-indent-guides-prop odd) 221 222 (fontified t highlight-indent-guides-prop odd) 222 223 (fontified t face (rainbow-delimiters-depth-2-face)) 223 248 (fontified t) 248 249 (fontified t face (rainbow-delimiters-depth-2-face)) 249 250 (fontified t) 250 251 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 251 252 (fontified t highlight-indent-guides-prop even) 252 253 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 253 254 (fontified t highlight-indent-guides-prop odd) 254 255 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 255 256 (fontified t highlight-indent-guides-prop even) 256 257 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 257 258 (fontified t highlight-indent-guides-prop odd) 258 259 (fontified t highlight-indent-guides-prop odd) 259 260 (fontified t highlight-indent-guides-prop odd) 260 261 (fontified t highlight-indent-guides-prop odd) 261 262 (fontified t highlight-indent-guides-prop odd) 262 263 (fontified t highlight-indent-guides-prop odd) 263 264 (fontified t) 264 265 (fontified t face (rainbow-delimiters-depth-1-face)) 265 266 (fontified t face (rainbow-delimiters-depth-3-face)) 266 267 (fontified t face (rainbow-delimiters-depth-2-face)) 267 268 (fontified t face (rainbow-delimiters-depth-1-face))) #("(print buffer-name)" 0 1 (fontified t face (rainbow-delimiters-depth-1-face)) 1 18 (fontified t) 18 19 (fontified t face (rainbow-delimiters-depth-1-face))) #("* TODO Pull emacs configuration out into a separate

" 0 1 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) composition (0 1 [9673]) fontified t) 1 2 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) fontified t) 2 6 (face org-todo fontified t) 6 51 (face org-level-1 fontified t) 51 52 (fontified t) 52 53 (fontified t)) #("gtkui.last_playlist_save_name /home/sribich/Downloads/Music/Playlist.dbpl
" 0 29 (fontified t face font-lock-variable-name-face) 29 73 (fontified t) 73 74 (fontified t)) #("* TODO Exit Codes in EXITCODES.md
" 0 1 (fontified t composition (0 1 [9673]) keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) face org-level-1) 1 2 (fontified t keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) face org-level-1) 2 6 (fontified t face org-todo) 6 33 (fontified t face org-level-1) 33 34 (fontified t)) #("Seriously clean up README.md" 0 28 (face org-level-1 fontified t)) #("
" 0 1 (fontified t)) #("* TODO Configure ZSH
" 0 1 (fontified t composition (0 1 [9673]) keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) face org-level-1) 1 2 (fontified t keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) face org-level-1) 2 6 (fontified t face org-todo) 6 20 (fontified t face org-level-1) 20 21 (fontified t)) #("ZSH? (default shell)" 0 20 (face org-level-1 fontified t)) #("
" 0 1 (fontified t)) #("* TODO ssh-agent, gpg-agent" 0 1 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) composition (0 1 [9673]) fontified t) 1 2 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) fontified t) 2 6 (face org-todo fontified t) 6 27 (face org-level-1 fontified t)) #("* TODO Scripts (backup)" 0 1 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) composition (0 1 [9673]) fontified t) 1 2 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) fontified t) 2 6 (face org-todo fontified t) 6 23 (face org-level-1 fontified t)) #("* TODO Ask for name/email to add git config options" 0 1 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) composition (0 1 [9673]) fontified t) 1 2 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) fontified t) 2 6 (face org-todo fontified t) 6 51 (face org-level-1 fontified t)) #("cronjob " 0 8 (face org-level-1 fontified t)) #("* TODO add global node modules" 0 1 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) composition (0 1 [9673]) fontified t) 1 2 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) fontified t) 2 6 (face org-todo fontified t) 6 30 (face org-level-1 fontified t)) #("* TODO add ~/.dotfiles/bin to the path" 0 1 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) composition (0 1 [9673]) fontified t) 1 2 (face org-level-1 keymap (keymap (mouse-1 . org-cycle) (mouse-2 lambda (e) (interactive "e") (mouse-set-point e) (org-cycle))) fontified t) 2 6 (face org-todo fontified t) 6 38 (face org-level-1 fontified t)) #(">/dev/null 2" 0 1 (face font-lock-string-face fontified t) 1 5 (face font-lock-string-face fontified t) 5 10 (face font-lock-string-face fontified t) 10 11 (fontified t face font-lock-string-face) 11 12 (fontified t face font-lock-string-face)) #("\"$(yarn global ls 2>/dev/null | grep $1 >/dev/null 2>&1; echo $?)\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face sh-quoted-exec fontified t) 4 5 (face sh-quoted-exec fontified t) 5 7 (face sh-quoted-exec fontified t) 7 8 (face font-lock-string-face fontified t) 8 9 (face font-lock-string-face fontified t) 9 18 (face font-lock-string-face fontified t) 18 19 (face font-lock-string-face fontified t) 19 20 (face font-lock-string-face fontified t) 20 37 (face font-lock-string-face fontified t) 37 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 54 (face font-lock-string-face fontified t) 54 55 (face font-lock-string-face fontified t) 55 56 (face font-lock-string-face fontified t) 56 57 (face font-lock-string-face fontified t) 57 58 (face font-lock-string-face fontified t) 58 59 (face font-lock-string-face fontified t) 59 60 (face font-lock-string-face fontified t) 60 61 (face font-lock-string-face fontified t) 61 62 (face font-lock-string-face fontified t) 62 63 (face font-lock-string-face fontified t) 63 64 (face font-lock-string-face fontified t syntax-table (3)) 64 65 (face font-lock-string-face fontified t) 65 66 (face font-lock-string-face fontified t)) #("  exit 1
" 0 1 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 1 2 (fontified t highlight-indent-guides-prop even) 2 3 (fontified t face font-lock-keyword-face) 3 6 (fontified t face font-lock-keyword-face) 6 7 (fontified t) 7 8 (fontified t) 8 9 (fontified t)) #("  die \"oh no\"

" 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop even fontified t) 1 2 (highlight-indent-guides-prop even fontified t) 2 3 (fontified t) 3 6 (fontified t) 6 13 (face font-lock-string-face fontified t) 13 14 (fontified t) 14 15 (fontified t)) #("
  exit
" 0 1 (fontified t) 1 2 (face highlight-indent-guides-character-face display "│" fontified t highlight-indent-guides-prop even) 2 3 (fontified t highlight-indent-guides-prop even) 3 4 (face font-lock-keyword-face fontified t) 4 7 (face font-lock-keyword-face fontified t) 7 8 (fontified t)) #("  # echo \"$npm_installed\" 1>&3 2>&1

" 0 1 (display "│" face highlight-indent-guides-character-face fontified t highlight-indent-guides-prop even) 1 2 (face font-lock-string-face fontified t highlight-indent-guides-prop even) 2 3 (face font-lock-string-face fontified t) 3 4 (face font-lock-string-face fontified t) 4 5 (face font-lock-string-face fontified t) 5 8 (face font-lock-string-face fontified t) 8 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t) 10 24 (face font-lock-string-face fontified t) 24 25 (face font-lock-string-face fontified t) 25 26 (face font-lock-string-face fontified t) 26 27 (face font-lock-string-face fontified t) 27 31 (face font-lock-string-face fontified t) 31 32 (face font-lock-string-face fontified t) 32 34 (face font-lock-string-face fontified t) 34 35 (face font-lock-string-face fontified t) 35 36 (fontified t) 36 37 (fontified t)) #("  echo \"$yarn_installed\" 1>&3 2>&1

" 0 1 (face highlight-indent-guides-character-face display "│" fontified t highlight-indent-guides-prop even) 1 2 (fontified t highlight-indent-guides-prop even) 2 3 (face font-lock-builtin-face fontified t) 3 6 (face font-lock-builtin-face fontified t) 6 7 (fontified t) 7 8 (face font-lock-string-face fontified t) 8 23 (face font-lock-string-face fontified t) 23 24 (face font-lock-string-face fontified t) 24 25 (fontified t) 25 26 (fontified t) 26 30 (fontified t) 30 31 (fontified t) 31 33 (fontified t) 33 34 (fontified t) 34 35 (fontified t) 35 36 (fontified t)) #(" | grep '$1' >/dev/null 2>&1; echo $?" 0 6 (face font-lock-string-face fontified t) 6 9 (face font-lock-string-face fontified t) 9 10 (face font-lock-string-face fontified t) 10 11 (face font-lock-string-face fontified t) 11 24 (face font-lock-string-face fontified t) 24 25 (face font-lock-string-face fontified t) 25 27 (face font-lock-string-face fontified t) 27 28 (face font-lock-string-face fontified t) 28 30 (face font-lock-string-face fontified t) 30 34 (face font-lock-string-face fontified t) 34 36 (face font-lock-string-face fontified t) 36 37 (face font-lock-string-face syntax-table (3) fontified t)) #("  exit" 0 1 (face highlight-indent-guides-character-face display "│" fontified t highlight-indent-guides-prop even) 1 2 (fontified t highlight-indent-guides-prop even) 2 3 (face font-lock-keyword-face fontified t) 3 6 (face font-lock-keyword-face fontified t)) #("\"$(yarn global ls 2>/dev/null | grep '$1' >/dev/null 2>&1; echo $?)\"" 0 1 (face font-lock-string-face fontified t) 1 2 (face font-lock-string-face fontified t) 2 3 (face font-lock-string-face fontified t) 3 4 (face sh-quoted-exec fontified t) 4 5 (face sh-quoted-exec fontified t) 5 7 (face sh-quoted-exec fontified t) 7 9 (face font-lock-string-face fontified t) 9 18 (face font-lock-string-face fontified t) 18 19 (face font-lock-string-face fontified t) 19 35 (face font-lock-string-face fontified t) 35 38 (face font-lock-string-face fontified t) 38 39 (face font-lock-string-face fontified t) 39 40 (face font-lock-string-face fontified t) 40 53 (face font-lock-string-face fontified t) 53 54 (face font-lock-string-face fontified t) 54 56 (face font-lock-string-face fontified t) 56 57 (face font-lock-string-face fontified t) 57 59 (face font-lock-string-face fontified t) 59 63 (face font-lock-string-face fontified t) 63 65 (face font-lock-string-face fontified t) 65 66 (face font-lock-string-face syntax-table (3) fontified t) 66 67 (face font-lock-string-face fontified t) 67 68 (face font-lock-string-face fontified t)) "" #(" >/dev/null 2" 0 6 (face font-lock-string-face fontified t) 6 11 (face font-lock-string-face fontified t) 11 12 (fontified t face font-lock-string-face) 12 13 (fontified t face font-lock-string-face)) #("exit" 0 4 (face font-lock-keyword-face fontified t)) #("
" 0 1 (fontified t)) #("    pa
" 0 1 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 1 2 (fontified t highlight-indent-guides-prop even) 2 3 (fontified t highlight-indent-guides-prop odd display "│" face highlight-indent-guides-character-face) 3 4 (fontified t highlight-indent-guides-prop odd) 4 5 (fontified t) 5 6 (fontified t) 6 7 (fontified t)) #("dev/null 2>&1" 0 4 (fontified t) 4 9 (fontified t) 9 12 (fontified t) 12 13 (fontified t face (highlight-symbol-face))) #("  local install_cmd=\"npm\"
" 0 1 (fontified t highlight-indent-guides-prop even display "│" face highlight-indent-guides-character-face) 1 2 (fontified t highlight-indent-guides-prop even) 2 3 (fontified t face font-lock-builtin-face) 3 7 (fontified t face font-lock-builtin-face) 7 8 (fontified t) 8 19 (fontified t face font-lock-variable-name-face) 19 20 (fontified t) 20 25 (fontified t face font-lock-string-face) 25 26 (fontified t)) #("    install_cmd=\"yarn\"" 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop even fontified t) 1 2 (highlight-indent-guides-prop even fontified t) 2 3 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop odd fontified t) 3 4 (highlight-indent-guides-prop odd fontified t) 4 5 (face font-lock-variable-name-face fontified t) 5 15 (face font-lock-variable-name-face fontified t) 15 16 (fontified t) 16 22 (face font-lock-string-face fontified t)) #("  show_progress sudo " 0 1 (face highlight-indent-guides-character-face display "│" highlight-indent-guides-prop even fontified t) 1 2 (highlight-indent-guides-prop even fontified t) 2 3 (fontified t) 3 20 (fontified t) 20 21 (face whitespace-trailing fontified t)) #("--global --quiet" 0 8 (fontified t) 8 16 (fontified t)) #("--global --quiet || {" 0 20 (fontified t) 20 21 (face (rainbow-delimiters-depth-2-face) fontified t))))
(setq search-ring '("cons" "default" "projectile" "workerList[" "pdf" "melp" "haskell" "melpa" "cannot have" "buff" "find-file-other-window" "C-c C-t" "* J" "* Pro" "projectile" "theme"))
(setq regexp-search-ring '("/package" "\\(Your\\).*?\\(vers\\)" "yas-expand-snippet" "dired-omit-files" "\\.last"))
