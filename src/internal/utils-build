#!/usr/bin/env bash

#-- Definitions ------------------------------------------------------------------------------------
packageGit () {
  local packageName=""
  local packageRepo=""
  local packageType=""
  local packageOpts=""
  local packageDeps=""

  local packagePre=""
  local packagePost=""

  local ret=0

  parseArguments "name"       "packageName"      - \
                 "repo"       "packageRepo"      - \
                 "type"       "packageType"      - \
                 "opts"       "packageOpts"      - \
                 "deps"       "packageDeps"      - \
                 "pre"        "packagePre"       - \
                 "post"       "packagePost"      - \
                 -- "${@}"

  trySubheader "${packageName}"

  [[ ! -z "${packagePre}" ]] && ${packagePre}

  # Get the repository and flag it as new if it did not previously exist
  _packageGitRepo "${packageName}" "${packageRepo}" || ret=1

  if _packageGitUpdate "${packageName}" "${ret}"; then

    if [[ ! -z "${packageDeps}" ]]; then
      packageInstallList "${packageDeps}"
    fi

    cdStart "_cdPackageGit" "${DOTFILES_BUILD}/${packageName}"

    case "${packageType}" in
      make)
        _packageGitMake "${packageName}" "${packageOpts}"
        ;;
      aur)
        _packageGitAur "${packageName}"
        ;;
      none)
        ;;
      *)
        fatal "Invalid package type ${packageType}"
        ;;
    esac

    cdEnd "_cdPackageGit"
  fi

  [[ ! -z "${packagePost}" ]] && ${packagePost}

  tryExitSubheader "${packageName}"
}

#-- Utilities --------------------------------------------------------------------------------------
_packageGitRepo () {
  # $1 - Package Name
  # $2 - Package Repository
  clog "Cloning ${1} repository..."

  if [[ -d "${DOTFILES_BUILD}/${1}" ]]; then
    skip
    return 1
  fi

  checkSuccess showProgress git clone "${2}" "${DOTFILES_BUILD}/${1}"

  return 0
}

_packageGitUpdate () {
  # $1 - Package Name
  # $2 - Package Age (0: new, 1: old)
  cdStart "_cdPackageGitUpdate" "${DOTFILES_BUILD}/${1}"

  local branchTag="$(git branch | grep \* | cut -d ' ' -f2)"
  local masterTag=""
  local updateTag=""

  local updated=1
  local doBuild=1

    # Switch to master branch to run updates
  if [[ "${branchTag}" != "master" ]]; then
    clog "Switching to branch master..."
    checkSuccess showProgress git checkout master --force
  fi

  # Update repository
  clog "Updating ${1} repository..."

  if [[ "$(git rev-parse HEAD)" != \
        "$(git ls-remote $(git rev-parse --abbrev-ref @{u} | sed 's/\// /g') | cut -f1)" ]]; then
    checkSuccess showProgress git pull --rebase origin master
    updated=0
  else
    skip
  fi

  # Check if releases exist
  masterTag="$(git describe --tags --abbrev=0 2>/dev/null)"
  returnTag="${?}"

  if [[ "${returnTag}" -eq 127 ]] || [[ "${returnTag}" -eq 128 ]]; then
    if [[ "${2}" -eq 0 ]]; then
      doBuild=0
    fi

    if [[ "${updated}" -eq 0 ]] &&
          confirm "Package ${1} can be rebuilt. Rebuild?"; then
      doBuild=0
    fi

    cdEnd "_cdPackageGitUpdate"
    return "${doBuild}"
  fi

  # Get updated tags
  updateTag="$(git tag --contains tags/${branchTag} 2>/dev/null | sed 1d | tail -n5 | tr '\n' ' ')"

  if [[ -z "${updateTag}" ]] && [[ "${2}" -eq 0 ]]; then
    clog "Checking out release ${masterTag}..."

    if [[ "${branchTag}" == "master" ]]; then
      checkSuccess showProgress git checkout -b "${masterTag}" "tags/${masterTag}"
      doBuild=0
    else
      skip
    fi
  fi

  if [[ ! -z "${updateTag}" ]]; then
    if confirm "A new version of ${1} is available. Update?"; then
      selection --title "Which release would you like to install?" \
                --start 5 \
                -- "${updateTag}"

      clog "Updating $1 to release ${SELECTED_VALUE}..."
      checkSuccess showProgress git checkout -b "${SELECTED_VALUE}" "tags/${SELECTED_VALUE}"
      doBuild=0
    fi
  else
    # Re checkout main branch
    if [[ "${branchTag}" != "master" ]]; then
      clog "Checking out original branch ${branchTag}..."
      checkSuccess showProgress git checkout "${branchTag}"
    fi
  fi

  cdEnd "_cdPackageGitUpdate"
  return "${doBuild}"
}

_packageGitMake () {
  # $1 - Project Name
  # $2 - Project Options

  # Autogen
  clog "Running ./autogen.sh..."

  if [[ -f "./autogen.sh" ]]; then
    checkSuccess showProgress ./autogen.sh
  else
    skip
  fi

  # Configure
  clog "Running ./configure ${2}..."

  if [[ -f "./configure" ]]; then
    checkSuccess showProgress ./configure "${2}"
  else
    skip
  fi

  # Make
  clog "Running make..."

  checkSuccess showProgress make

  # Make Install
  clog "Running make install.."

  if grep "install:" < "${DOTFILES_BUILD}/${1}/Makefile"; then
    checkSuccess showProgress sudo make install
  else
    skip
  fi
}

_packageGitAur () {
  # $1 - Package Name
  # Make Package
  clog "Running makepkg..."

  checkSuccess showProgress makepkg

  # Install Package
  clog "Running makepkg --install..."

  checkSuccess showProgress makepkg --install
}
