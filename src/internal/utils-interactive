#!/usr/bin/env bash

#-- Config -----------------------------------------------------------------------------------------
SELECTED_VALUE=""

#-- Definitions ------------------------------------------------------------------------------------
selection () {
  local selectionTitle=""
  local selectionValue=""
  local selectionLength=""

  local head=()
  local tail=()

  splitArguments "head" "tail" "$@"

  parseArguments "title" "selectionTitle" dual \
                 "value" "selectionValue" dual \
                 "--" "${head[@]}"

  # Print the selection title
  console --linefeed --headless --bold "${selectionTitle}"

  # Set default value
  selectionValue="${selectionValue:-1}"
  selectionLength="${#tail[@]}"

  # Initial render
  _selectionPrint "0" "${selectionValue}" "${tail[@]}"

  # Select
  while read -rsn1 key; do
    case "${key}" in
      $'\x1b')
        read -rsn1 -t 0.1 tmp
        if [[ "${tmp}" == "[" ]]; then
          read -rsn1 -t 0.1 tmp
          case "${tmp}" in
            "A") # Up
              if [[ "${selectionValue}" -eq 1 ]]; then
                selectionValue="${selectionLength}"
              else
                selectionValue="$(( selectionValue - 1 ))"
              fi
              ;;
            "B") #Down
              if [[ "${selectionValue}" -eq "${selectionLength}" ]]; then
                selectionValue="1"
              else
                selectionValue="$(( selectionValue + 1 ))"
              fi
              ;;
          esac
        fi
        ;;
      "")
        break
        ;;
    esac

    _selectionPrint "1" "${selectionValue}" "${tail[@]}"
  done

  # Cleanup
  _selectionClear "$selectionLength"

  # Set the selected value
  local val=$(( selectionValue - 1 ))
  SELECTED_VALUE="${tail[${val}]}"
}

selectionValue () {
  [[ "${1}" == "${SELECTED_VALUE}" ]] && return 0 || return 1
}

#-- Definitions ------------------------------------------------------------------------------------
confirm () {
  local confirmString="[y/N]"

  if [[ "${#}" -eq 1 ]]; then
    confirmString="$1 ${confirmString}"
  fi

  _printHeader

  read -rsp "${confirmString}" -n1
  clearLine

  return "$(confirmed)"
}

confirmed () {
  local ret=1

  set +o nounset

  if [[ "$REPLY" =~ ^[yY]$ ]]; then
    unset REPLY
    ret=0
  fi

  set -o nounset
  return "${ret}"
}

#-- Utilities --------------------------------------------------------------------------------------
_selectionPrint () {
  local listId="1"
  local listAge="${1}" && shift
  local selectedId="${1}" && shift

  if [[ "${listAge}" -ne 0 ]]; then
    printf "\033[%iA" "${#}"
  fi

  for item in "${@}"; do
    [[ "${listId}" == "${selectedId}" ]] && printf "\033[96m"
    console --headless --linefeed " â€¢ ${item}"
    [[ "${listId}" == "${selectedId}" ]] && printf "\033[0m"

    listId="$(( listId + 1 ))"
  done
}

_selectionClear () {
  # $1 - Selection Length
  moveUp "$(( ${1} + 1 ))"

  for _ in $(seq 0 "${1}"); do
    clearLine && console --linefeed
  done

  moveUp "$(( ${1} + 1 ))"
}
