#!/usr/bin/env bash

#-- Check flags ------------------------------------------------------------------------------------
if [[ "$NO_SYNC" = true ]]; then
  printf "Syncing dotfiles...\033[1;93mSKIPPING\033[0m\n"
  return
fi

#-- Initialize the git repository ------------------------------------------------------------------
printf "Initializing git repository..."

if [[ "$(git rev-parse --is-inside-work-tree 2>/dev/null)" != "true" ]]; then
  git init >/dev/null 2>&1 || {
    printf "\033[1;91mERROR\033[0m\n"
    printf "[\033[1;91mError\033[0m] Failed to initialize git repository\n"
    exit 21
  }

  git remote add origin "${DOTFILES_GIT_REMOTE}" >/dev/null 2>&1 || {
    printf "\033[1;91mERROR\033[0m\n"
    printf "[\033[1;91mError\033[0m] Failed to add remote\n"
    exit 22
  }

  git fetch origin master >/dev/null 2>&1 || {
    printf "\033[1;91mERROR\033[0m\n"
    printf "[\033[1;91mError\033[0m] Failed to fetch origin\n"
    exit 23
  }

  git reset --hard FETCH_HEAD >/dev/null 2>&1 || {
    printf "\033[1;91mERROR\033[0m\n"
    printf "[\033[1;91mError\033[0m] Failed to reset branch\n"
    exit 24
  }

  git clean -fd >/dev/null 2>&1

  printf "\033[1;92mOK\033[0m\n"
else
  printf "\033[1;93mSKIPPING\033[0m\n"
fi

#-- Sync the repository ----------------------------------------------------------------------------
printf "Syncing dotfiles..."

git pull --rebase origin master >/dev/null 2>&1 || {
  printf "\033[1;91mERROR\033[0m\n"
  printf "[\033[1;91mError\033[0m] Failed to sync to remote repository\n"
  exit 25
}

printf "\033[1;92mOK\033[0m\n"

#-- Update modules ---------------------------------------------------------------------------------
printf "Updating submodules..."

git submodule update --recursive --init >/dev/null 2>&1 || {
  printf "\033[1;91mERROR\033[0m\n"
  printf "[\033[1;91mError\033[0m] Failed to update submodules\n"
  exit 26
}

printf "\033[1;92mOK\033[0m\n"
