#!/USSR/bin/env bash

#-- Header logging ---------------------------------------------------------------------------------
HEADER_COLOR="92"
LAST_HEADER_COLOR="93"

SUBHEADER_COLOR="95"
LAST_SUBHEADER_COLOR="96"

function u_toggle_header_color() {
    if [[ "$1" == "header" ]]; then
        TMP_HEADER_COLOR=$HEADER_COLOR
        HEADER_COLOR=$LAST_HEADER_COLOR
        LAST_HEADER_COLOR=$TMP_HEADER_COLOR
    else
        TMP_HEADER_COLOR=$SUBHEADER_COLOR
        SUBHEADER_COLOR=$LAST_SUBHEADER_COLOR
        LAST_SUBHEADER_COLOR=$TMP_HEADER_COLOR
    fi
}

function u_header() {
    u_toggle_header_color "header"

    IN_HEADER=1
    HEADER_TITLE="$1"
}
function u_exit_header() {
    unset IN_HEADER
}

function u_subheader() {
    u_toggle_header_color "subheader"

    IN_SUBHEADER=1
    SUBHEADER_TITLE="$1"
}
function u_exit_subheader() {
    unset IN_SUBHEADER
}

function u_print_header() {
    if [[ $IN_SUBHEADER ]]; then
        printf "  [\e[1;${SUBHEADER_COLOR}m$SUBHEADER_TITLE\e[0m] "
        return
    fi

    if [[ $IN_HEADER ]]; then
        printf "[\e[1;${HEADER_COLOR}m$HEADER_TITLE\e[0m] "
    fi

#    if [[ $IN_HEADER ]]; then
#        BUILT_HEADER_STRING="\e[${HEADER_COLOR}m$HEADER_TITLE\e[0m"
#
#        if [[ $IN_SUBHEADER ]]; then
#            BUILT_HEADER_STRING="$BUILT_HEADER_STRING:\e[${SUBHEADER_COLOR}m$SUBHEADER_TITLE\e[0m"
#        fi
#
#        printf "[$BUILT_HEADER_STRING] "
#    fi
}

#-- Message logging --------------------------------------------------------------------------------
function u_print() {
    u_print_header

    printf "$@"
}
function u_printl() {
    u_print "$@"
    printf "\n"
}

function u_error() {
    u_printl "[\e[1;91mError\e[0m] %s" "$@"
}
function u_warning() {
    u_printl "[\e[1;93mWarning\e[0m] %s" "$@"
}

#-- Success logging --------------------------------------------------------------------------------
function u_pass() {
    printf "\e[92mOK\e[0m\n"
}
function u_fail() {
    printf "\e[91mERROR\e[0m\n"
}
function u_skip() {
    printf "\e[93mSKIPPED\e[0m\n"
}

#-- Confirmation -----------------------------------------------------------------------------------
function seek_confirmation() {
    CONFIRM_MESSAGE="[y/N]"

    if [ -n "$1" ]; then
        CONFIRM_MESSAGE="[?] $1 $CONFIRM_MESSAGE"
    fi

    read -p "$CONFIRM_MESSAGE: " -n 1
    printf "\r\e[K"
}
function is_confirmed() {
    if [[ "$REPLY" =~ ^[yY]$ ]]; then
        unset REPLY
        return 0
    fi

    unset REPLY
    return 1
}
function set_confirmed() {
    REPLY='y'
}

#-- Selection --------------------------------------------------------------------------------------
function print_selection() {
    SELECTED_ID="$1"
    shift

    # Update List
    LIST_ID="1"
    for i in "$@"; do
        if [[ "$LIST_ID" == "1" && ! $FIRST_SELECTION_RUN ]]; then
            printf "\e[$#A"
        fi

        if [[ "$LIST_ID" == "$SELECTED_ID" ]]; then
            printf "\e[96m"
        fi

        u_print "$i\e[0m"

        LIST_ID="$(($LIST_ID+1))"
    done

    if [[ -n $FIRST_SELECTION_RUN ]]; then
        unset FIRST_SELECTION_RUN
    fi
}
function delete_selection() {
    printf "\e[$1A"

    for (( c=1; c<=$1; c++ )); do
        printf "\r\e[K\n"
    done

    printf "\e[$1A"
}
function u_selection() {
    CURRENT_SELECTION="1"
    FIRST_SELECTION_RUN=1
    SELECTION_LENGTH="$#"

    if [[ "${1:0:1}" == '^' ]]; then
        u_print "Which dank meme would you like yo\n"
        shift
    fi

    print_selection $CURRENT_SELECTION $@

    while read -rsn1 key; do
        case "$key" in
            $'\x1b')
                read -rsn1 -t 0.1 tmp
                if [[ "$tmp" == '[' ]]; then
                    read -rsn1 -t 0.1 tmp
                    case "$tmp" in
                        "A")
                            if [[ "$CURRENT_SELECTION" == "1" ]]; then
                                CURRENT_SELECTION="$SELECTION_LENGTH"
                            else
                                CURRENT_SELECTION="$(($CURRENT_SELECTION-1))"
                            fi
                            ;;
                        "B")
                            if [[ "$CURRENT_SELECTION" == "$SELECTION_LENGTH" ]]; then
                                CURRENT_SELECTION="1"
                            else
                                CURRENT_SELECTION="$(($CURRENT_SELECTION+1))"
                            fi
                            ;;
                    esac
                fi
                ;;
            "")
                break;
                ;;
        esac
        print_selection $CURRENT_SELECTION $@
    done
    delete_selection $SELECTION_LENGTH
    SELECTION_VALUE="${!CURRENT_SELECTION}"
}

#-- Package Install --------------------------------------------------------------------------------
function package_install() {
    sudo dnf install $1 -qy || {
        return 1
    }

    return 0
}

#-- Command existance ------------------------------------------------------------------------------
function cmd_exists() {
    command -v $1 >/dev/null 2>&1 && {
        return 0
    }

    return 1
}
