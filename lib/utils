#!/usr/bin/env bash

#-- Cursor manipulation ----------------------------------------------------------------------------
# From http://askubuntu.com/questions/366103/saving-more-corsor-positions-with-tput-in-bash-terminal
save_cursor () {
  exec < /dev/tty
  oldstty=$(stty -g)
  stty raw -echo min 0
  printf "\e[6n" 1>&3 > /dev/tty
  IFS=';' read -r -d R -a pos
  stty $oldstty
  eval "$1[0]=$((${pos[0]:2} - 1))"
  eval "$1[1]=$((${pos[1]} - 1))"
}
restore_cursor () {
    eval ARRAY=\( \${${1}[@]} \)
    tput cup ${ARRAY[0]} ${ARRAY[1]} 1>&3
}

#-- Safe CD ----------------------------------------------------------------------------------------
cd_safe () {
  cd "$1" 2>/dev/null || {
    die "Failed to change directory to $1" 14
  }
}

#-- Check for set flags ----------------------------------------------------------------------------
is_set () {
  local flag="$1"

  # Prevent errors
  set +o nounset

  if [[ "${!flag}" = true ]]; then
    return 0
  fi

  set -o nounset

  return 1
}
is_default () {
  if [[ "$INSTALL_DEFAULTS" = true ]]; then
    return 0
  fi

  return 1
}

#-- Check for command existance --------------------------------------------------------------------
command_exists () {
  command -v "$1" >/dev/null 2>&1 && return 0 || return 1
}

#-- Random -----------------------------------------------------------------------------------------
random_string () {
  cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${1:-32} | head -n 1
}

#-- Super user checks ------------------------------------------------------------------------------
is_super_user () {
  if [[ "$EUID" -eq "0" ]]; then
    return 0
  fi

  return 1
}
can_use_sudo () {
  sudo -n true || {
    return 1
  }

  return 0
}

#-- Updating ---------------------------------------------------------------------------------------
# Compare a version string (major.minor.build) to another version string to see if a newer
# version is available.
#
# $1 - Installed version
# $2 - Newest version
function can_update() {
  local installed="${1//./ }"
  local available="${2//./ }"

  installed=($installed)
  available=($available)

  [[ "${available[0]]}" -gt "${installed[0]}" ]] && return 0
  [[ "${available[0]]}" -lt "${installed[0]}" ]] && return 1

  [[ "${available[1]]}" -gt "${installed[1]}" ]] && return 0
  [[ "${available[1]]}" -lt "${installed[1]}" ]] && return 1

  [[ "${available[2]]}" -gt "${installed[2]}" ]] && return 0
  [[ "${available[2]]}" -lt "${installed[2]}" ]] && return 1

  return 1
}
