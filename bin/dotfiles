#!/usr/bin/env bash
# shellcheck disable=SC1090

#-- Bash Starter -----------------------------------------------------------------------------------
declare -g BOOTSTRAP_DIR && BOOTSTRAP_DIR="$(cd "${BASH_SOURCE[0]%/*}" && pwd)/../lib"
declare -g CACHE_DIR="${BOOTSTRAP_DIR}/.cache"

declare -ag IMPORT_SOURCES=(
    "${CACHE_DIR}"
    "https://raw.githubusercontent.com/nulliel/bash-starter/master/lib/modules"
)

# shellcheck source=lib/bootstrap
source "${BOOTSTRAP_DIR}/bootstrap"

#-- Config -----------------------------------------------------------------------------------------
readonly SCRIPT_NAME="$(basename "${0}")"

readonly DOTFILES_DIR="${HOME}/.dotfiles"
readonly DOTFILES_USR="${DOTFILES_DIR}/.usr"
readonly DOTFILES_BUILD="${DOTFILES_DIR}/.build"
readonly DOTFILES_STORE="${DOTFILES_DIR}/.store"

readonly DOTFILES_LOG="${DOTFILES_STORE}/dotfiles.log"
readonly DOTFILES_REMOTE="https://github.com/nulliel/dotfiles.git"

#-- Libraries --------------------------------------------------------------------------------------
# source "${DOTFILES_DIR}/lib/internal/utils"             # GOOD
# source "${DOTFILES_DIR}/lib/internal/utils-arguments"   # GOOD
# source "${DOTFILES_DIR}/lib/internal/utils-build"       #
# source "${DOTFILES_DIR}/lib/internal/utils-console"     # GOOD
# source "${DOTFILES_DIR}/lib/internal/utils-fs"          # GOOD
# source "${DOTFILES_DIR}/lib/internal/utils-header"      # GOOD
# source "${DOTFILES_DIR}/lib/internal/utils-interactive" # GOOD
# source "${DOTFILES_DIR}/lib/internal/utils-logging"     # GOOD
# source "${DOTFILES_DIR}/lib/internal/utils-npm"         #
# source "${DOTFILES_DIR}/lib/internal/utils-package"     # GOOD
source "${DOTFILES_DIR}/src/internal/utils-process"
# source "${DOTFILES_DIR}/lib/internal/utils-progress"    # GOOD
# source "${DOTFILES_DIR}/lib/internal/utils-system"      # GOOD

#-- Require non root with sudo privileges ----------------------------------------------------------
if [[ "$EUID" -eq 0 ]]; then
  printf "This script should not be run using sudo or as the root user\n"
  exit
fi

if ! sudo -n true; then
    printf "This script requires the use of sudo\n"
#    exit
fi

if ! command -v "git" 1>/dev/null 2>&1; then
    printf "This script requires git\n" 1>&2
    exit
fi

#-- Utils ------------------------------------------------------------------------------------------
showUsage()
{
    cat <<EOF
Usage: $SCRIPT_NAME [options]

Options:
    -h, --help        Print this help text
    -h, --no-sync     Skip syncing the git repository

Documentation can be found at https://github.com/nulliel/dotfiles/
EOF
}

#-- Main -------------------------------------------------------------------------------------------
main()
{
    import fs

    trap "trapError" ERR                          # utils-process
    trap "trapExit"  EXIT SIGINT SIGTERM SIGTSTP  # utils-process

    # Disable word wrapping
    tput rmam

    #-- Title --------------------------------------------------------------------------------------
    clear
    console.info '          888          888     .d888 d8b 888                  '
    console.info '          888          888    d88P"  Y8P 888                  '
    console.info '          888          888    888        888                  '
    console.info '      .d88888  .d88b.  888888 888888 888 888  .d88b.  .d8888b '
    console.info '     d88" 888 d88""88b 888    888    888 888 d8P  Y8b 88K     '
    console.info '     888  888 888  888 888    888    888 888 88888888 "Y8888b.'
    console.info '     Y88b 888 Y88..88P Y88b.  888    888 888 Y8b.          X88'
    console.info '      "Y88888  "Y88P"   "Y888 888    888 888  "Y8888   88888P"'
    console.info "\n"

    #-- Arguments ----------------------------------------------------------------------------------
    local noSync=false # Prevent git synchronization

    while (( "${#}" )); do
        case "$1" in
            -h|--help)
                showUsage && exit 0
                ;;
            -n|--no-sync)
                noSync=true
                ;;
        esac

        shift
    done

    #-- Make sure we're in the right directory -------------------------------------------------------
    fs.cdSafe "${DOTFILES_DIR}"

    #-- Create folder structures ---------------------------------------------------------------------
    fs.mkdirSafe "${DOTFILES_USR}"
    fs.mkdirSafe "${DOTFILES_USR}/bin"
    fs.mkdirSafe "${DOTFILES_USR}/etc"
    fs.mkdirSafe "${DOTFILES_USR}/include"
    fs.mkdirSafe "${DOTFILES_USR}/lib"
    fs.mkdirSafe "${DOTFILES_USR}/local"
    fs.mkdirSafe "${DOTFILES_USR}/share"
    fs.mkdirSafe "${DOTFILES_USR}/src"

    fs.mkdirSafe "${DOTFILES_BUILD}"
    fs.mkdirSafe "${DOTFILES_STORE}"

    #-- Acquire the lock ---------------------------------------------------------------------------
    lockfile "${SCRIPT_NAME}"

    #-- Sync repository ------------------------------------------------------------------------------
    source "${DOTFILES_DIR}/src/internal/sync"

    #-- Install packages -----------------------------------------------------------------------------
    source "${DOTFILES_DIR}/src/configure_packages"

    #-- Create links ---------------------------------------------------------------------------------
    source "${DOTFILES_DIR}/src/configure_links"

    #-- Restart terminal -----------------------------------------------------------------------------
    console.info "Please restart your terminal session for changes to take effect"

    while read -r; do
        :
    done
}

main "$@"
