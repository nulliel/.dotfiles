#!/usr/bin/env bash

#-- Config -----------------------------------------------------------------------------------------
readonly SCRIPT_NAME="$(basename "$0")"

readonly LOCKFILE_DIR="/tmp"

readonly DOTFILES_DIRECTORY="${HOME}/.dotfiles"
readonly DOTFILES_LOG_FILE="/tmp/dotfiles.log"
readonly DOTFILES_GIT_REPO="https://github.com/nulliel/dotfiles.git"

declare -i SCRIPT_HEIGHT="$(tput lines)"

#-- Options ----------------------------------------------------------------------------------------
set -o errexit     # Exit on most errors
set -o errtrace    # Inherit error traps
set -o nounset     # Disallow expansion of unset variables

#-- Trap functions ---------------------------------------------------------------------------------
function trap_err() {
  # Disable the trap to prevent recursion
  trap - ERR

  # Undo logging
  exec 1>&3 2>&4 3>&- 4>&- 5>&- 6>&-

  # Consider further errors nonfatal so we can run to completion
  set +o errexit

  # Print fatal error
  printf "\n[\e[1;91mFatal\e[0m] Check the logfile at ${DOTFILES_LOG_FILE} for more information."

  # Exit with failure status
  if [[ "$#" -eq 1 && "$1" =~ ^[0-9]+$ ]]; then
    exit "$1"
  else
    exit 1
  fi
}

#-- Lock function ----------------------------------------------------------------------------------
function lock() {
  local prefix="$1"
  local fd="${2:-200}"
  local lock_file="$LOCKFILE_DIR/$prefix.lock"

  # Create the lock
  eval "exec $fd>$lock_file"

  # Acquirer the lock
  flock -n 200 \
    && return 0 \
    || return 1
}

#-- Local helpers ----------------------------------------------------------------------------------
function output_to_log() {
  IFS=''
  while read data; do
    printf "%b\n" "$data" \
      | sed -r "s/\r//g" \
      | sed -r "s/\x1B\[\?7[l|h]//g" \
      | sed -r "s/\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K|A]//g" \
      >>$DOTFILES_LOG_FILE

    # Hack to maintain a copy of the actual height
    SCRIPT_HEIGHT="$(tput lines)"
  done
}
function parse_params() {
  INSTALL_DEFAULTS=false  # Perform all default actions without prompts
  NO_LINKS=false          # Don't create symbolic links
  NO_PACKAGES=false       # Don't install packages (OVERRIDES DEFAULTS)
  NO_SYNC=false           # Don't sync dotfiles (OVERRIDES DEFAULTS)

  for opt in "$@"; do
    case "$opt" in
      --defaults)
        INSTALL_DEFAULTS=true
        ;;
      --no-links)
        NO_LINKS=true
        ;;
      --no-packages)
        NO_PACKAGES=true
        ;;
      --no-sync)
        NO_SYNC=true
        ;;
      -h|--help)
        show_usage
        exit 0
        ;;
      -*|--*)
        printf "[\e[1;91mError\e[0m] Invalid option $opt\n"
        exit 1
        ;;
    esac
  done

  readonly INSTALL_DEFAULTS
  readonly NO_LINKS
  readonly NO_PACKAGES
  readonly NO_SYNC
}
function show_banner() {
  clear
  printf '\e[1m'
  printf '          888          888     .d888 d8b 888                  \n'
  printf '          888          888    d88P"  Y8P 888                  \n'
  printf '          888          888    888        888                  \n'
  printf '      .d88888  .d88b.  888888 888888 888 888  .d88b.  .d8888b \n'
  printf '     d88" 888 d88""88b 888    888    888 888 d8P  Y8b 88K     \n'
  printf '     888  888 888  888 888    888    888 888 88888888 "Y8888b.\n'
  printf '     Y88b 888 Y88..88P Y88b.  888    888 888 Y8b.          X88\n'
  printf '      "Y88888  "Y88P"   "Y888 888    888 888  "Y8888   88888P" \e[0m\n\n'
}
function show_usage() {
  cat <<EOF
Usage: $SCRIPT_NAME [options]

Options:
        --defaults      Install all defaults without any prompts
    -h, --help          Print this help text
        --no-links      Suppress linking of dotfiles
        --no-packages   Suppress package updates
        --no-sync       Suppress repository syncing

Documentation can be found at https://github.com/nulliel/dotfiles/
EOF
}

#-- Main function ----------------------------------------------------------------------------------
function main() {
  trap "trap_err" ERR

  show_banner
  parse_params "$@"

  #-- Make sure we're in the right directory -------------------------------------------------------
  cd "${DOTFILES_DIRECTORY}"

  #-- Empty the log file ---------------------------------------------------------------------------
  printf "" >"$DOTFILES_LOG_FILE"

  #-- Log everything -------------------------------------------------------------------------------
  # fd1 - $DOTFILES_LOG_FILE
  # fd2 - $DOTFILES_LOG_FILE
  # fd3 - stdout
  # fd4 - stderr
  # fd5 - $DOTFILES_LOG_FILE && stdout
  # fd6 - $FOTFILES_LOG_FILE && stderr
  exec 3>&1 4>&2 1> >(output_to_log) 2>&1 5> >(tee /dev/fd/3) 6> >(tee /dev/fd/4)

  #-- Source helpers -------------------------------------------------------------------------------
  source $DOTFILES_DIRECTORY/lib/utils

  #-- Acquire the lock -----------------------------------------------------------------------------
  lock $SCRIPT_NAME || {
    die "Only one instance of $SCRIPT_NAME can run at a time."
  }

  #-- Check privileges -----------------------------------------------------------------------------
  if [[ "$EUID" -eq 0 ]]; then
    die "This script should not be run using sudo or as the root user"
  fi

  sudo -n true || {
    die "This script requires the use of sudo"
  }

  # All sleeps after this point are a bit of a hack to help prevent issues with writing to
  # stderr/stdout.

  #-- Ensure git is installed ----------------------------------------------------------------------
  sleep 0.1
  source $DOTFILES_DIRECTORY/packages/git

  #-- Sync repository ------------------------------------------------------------------------------
  sleep 0.1
  source $DOTFILES_DIRECTORY/lib/sync

  #-- Install packages -----------------------------------------------------------------------------
  sleep 0.1
  source $DOTFILES_DIRECTORY/lib/packages

  #-- Create links ---------------------------------------------------------------------------------
  sleep 0.1
  source $DOTFILES_DIRECTORY/lib/links
}

main "$@"
